<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Api\BaseApiController;
use App\Http\Requests\Api\V1\CompetitionLevelRequest;
use App\Http\Requests\Api\V1\Competitions\AddUpdateAdvertisementRequest;
use App\Http\Requests\Api\V1\Competitions\AddUpdateConditionRequest;
use App\Http\Requests\Api\V1\Competitions\AddUpdatePlaceRequest;
use App\Http\Requests\Api\V1\Competitions\AddUpdatePrizesRequest;
use App\Http\Requests\Api\V1\Competitions\AddUpdateStagesRequest;
use App\Http\Requests\Api\V1\Competitions\CompetitionRequest;
use App\Http\Requests\Api\V1\ConcertHonoringRequest;
use App\Http\Requests\Api\V1\PrizeRequest;
use App\Http\Resources\CompetitionLevelResource;
use App\Http\Resources\CompetitionResource;
use App\Models\Competition;
use App\Repositories\Contracts\CompetitionContract;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use phpDocumentor\Reflection\Types\Resource_;

class CompetitionController extends BaseApiController
{

    /**
     * CompetitionController constructor.
     * @param CompetitionContract $repository
     */
    public function __construct(CompetitionContract $repository)
    {
        parent::__construct($repository, CompetitionResource::class);
    }

    public function index(): mixed
    {
        if (request('get_for_filter')){
            $competitions = Competition::cursor();
            return CompetitionResource::collection($competitions);
        }

        if (request('get_for_statistics')){
            return Competition::count();
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param CompetitionRequest $request
     *
     * @return Response
     */
    public function store(CompetitionRequest $request)
    {
        $data = $request->validated();
        $data['steps_numbers'] = [1];
        $competition = $this->repository->create($data);
        return $this->respondWithModel($competition);
    }

   /**
    * Display the specified resource.
    *
    * @param Competition $competition
    *
    */
   public function show(Competition $competition)
   {
      return $this->respondWithModel($competition);
   }

    /**
     * Show the form for editing the specified resource.
     *
     * @param Competition $competition
     *
     */
    public function edit(Competition $competition)
    {
      //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param CompetitionRequest $request
     * @param Competition $competition
     *
     */
    public function update(CompetitionRequest $request, Competition $competition)
    {
        $competition = $this->repository->update($competition, $request->validated());
        return $this->respondWithModel($competition);
    }


    public function addUpdatePlace(AddUpdatePlaceRequest $request, Competition $competition)
    {
        $competition = $this->repository->addUpdatePlace($competition, $request->validated());
        return $this->respondWithModel($competition);
    }

    public function addUpdateStages(AddUpdateStagesRequest $request, Competition $competition)
    {
        $competition = $this->repository->addUpdateStages($competition, $request->validated());
        return $this->respondWithModel($competition);
    }

    public function addUpdateCondition(AddUpdateConditionRequest $request, Competition $competition)
    {
        $competition = $this->repository->addUpdateCondition($competition, $request->validated());
        return $this->respondWithModel($competition);
    }

    public function addUpdateAdvertisement(AddUpdateAdvertisementRequest $request, Competition $competition)
    {
        $competition = $this->repository->addUpdateAdvertisement($competition, $request->validated());
        return $this->respondWithModel($competition);
    }

    public function addUpdatePrizes(AddUpdatePrizesRequest $request, Competition $competition)
    {
        $competition = $this->repository->addUpdatePrizes($competition, $request->all());
        return $this->respondWithModel($competition);
    }

    public function addUpdateConcertHonoring(Competition $competition, ConcertHonoringRequest $request): JsonResponse
    {
        $this->repository->addUpdateConcertHonoring($competition, $request->validated());
        return $this->respondWithSuccess(__('general.competition_concert_added_successfully'));

    }

    public function update_level( Competition $competition,CompetitionLevelRequest $request) {
        $model = $this->repository->update_competition_level($competition , $request);
        return new CompetitionLevelResource($model);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param Competition $competition
     *
     * @return JsonResponse
     */
    public function destroy(Competition $competition)
    {
        $this->repository->remove($competition);
        return $this->respondWithSuccess(__('Competition Deleted Successfully'));
    }

    public function toggle(): JsonResponse
    {
        $this->repository->toggleField(request()->id , 'status');
        return $this->respondWithSuccess(__('general.Status Changed Successfully'));
    }

    public function upload(Request $request)
    {
        // To delete old work experience attach
//        if ($request->old_attach_id){
//            $oldFile = File::find($request->old_attach_id);
//            if ($oldFile){
//                $this->deleteFile($oldFile);
//            }
//        }

        $uploaded = $this->repository->uploadFile($request);
        return $uploaded;
    }



}
