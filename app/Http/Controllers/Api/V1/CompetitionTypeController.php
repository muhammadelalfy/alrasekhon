<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Api\BaseApiController;
use App\Http\Requests\Api\V1\CompetitionTypeRequest;
use App\Http\Resources\CompetitionTypeResource;
use App\Models\CompetitionType;
use App\Repositories\Contracts\CompetitionTypeContract;
use \Illuminate\Http\Response;
use \Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Request;

class CompetitionTypeController extends BaseApiController
{

    /**
     * CompetitionTypeController constructor.
     * @param CompetitionTypeContract $repository
     */
    public function __construct(CompetitionTypeContract $repository)
    {
        parent::__construct($repository, CompetitionTypeResource::class);
    }

    public function index(): mixed
    {
        if (request('get_for_competition')){
            $competitionTypes = CompetitionType::cursor();
            return $this->respondWithCollection($competitionTypes);
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param CompetitionTypeRequest $request
     *
     * @return Response
     */
    public function store(CompetitionTypeRequest $request)
    {
        $competitionType = $this->repository->create($request->all());
        return $this->respondWithModel($competitionType);
    }


    /**
     * Update the specified resource in storage.
     *
     * @param CompetitionTypeRequest $request
     * @param CompetitionType $competitionType
     *
     */
    public function update(CompetitionTypeRequest $request, CompetitionType $competitionType)
    {
        $competitionType = $this->repository->update($competitionType, $request->validated());
        return $this->respondWithModel($competitionType);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param CompetitionType $competitionType
     *
     * @return JsonResponse
     */
    public function destroy(CompetitionType $competitionType)
    {
        $this->repository->remove($competitionType);
        return $this->respondWithSuccess(__('Competition type deleted successfully'));
    }

    /**
     * Toggle Type status
     * @return JsonResponse
     */
    public function toggle(){
        $this->repository->toggleField(request()->id , 'status');
        return $this->respondWithSuccess(__('general.Status Changed Successfully'));
    }

}
