<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Api\BaseApiController;
use App\Http\Requests\Api\V1\Contestants\ContestantRequest;
use App\Http\Resources\ContestantResource;
use App\Models\Contestant;
use App\Repositories\Contracts\ContestantContract;
use App\Traits\FileUploadTrait;
use App\Traits\JsonValidationTrait;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;

class ContestantController extends BaseApiController
{

    use JsonValidationTrait, FileUploadTrait;
    /**
     * ContestantController constructor.
     * @param ContestantContract $repository
     */
    public function __construct(ContestantContract $repository)
    {
        parent::__construct($repository, ContestantResource::class);
    }

    public function index(): mixed
    {
        if (request('get_for_statistics')){
            return Contestant::count();
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param ContestantRequest $request
     *
     * @return Response
     */
    public function store(ContestantRequest $request)
    {
        $data = $request->all();
        $data['step_no'] = ($data['step_no'] + 1);
        $contestant = $this->repository->create($data);
        return $this->respondWithModel($contestant);
    }

    /**
     * Update steps global function
     * @param Contestant $contestant
     * @param Request $request
     * @return mixed|void
     * @throws ValidationException
     */
    public function updateStep(Contestant $contestant, Request $request)
    {
        $step = $request->step_no;
        if ($step == 2){
            return $this->step2($contestant, $request);
        }
    }

    /**
     * Step one function
     * @param Contestant $contestant
     * @param $request
     * @return mixed
     * @throws ValidationException
     */
    private function step2(Contestant $contestant, $request) :mixed
    {
        $addressRegex = "/^[0-9a-zA-Z\p{Arabic} !@#$%^&*()]+$/iu";
        $rules = [
            'country_id' => ['required', 'exists:countries,id'],
            'governorate_id' => ['required', 'exists:governorates,id'],
            'city_id' => ['required', 'exists:cities,id'],
            'main_address' => ['required', 'string', 'min:1', 'max:200', 'regex:'.$addressRegex],
            'additional_address' => ['required', 'string', 'min:1', 'max:200', 'regex:'.$addressRegex],
        ];
        $attributes = [
            'country_id' => __('contestants.country_id'),
            'governorate_id' => __('contestants.governorate_id'),
            'city_id' => __('contestants.city_id'),
            'main_address' => __('contestants.main_address'),
            'additional_address' => __('contestants.additional_address'),

        ];

        $validator = Validator::make($request->all(), $rules, [], $attributes);

        if ($validator->fails()){
            $this->failedValidation($validator);
        }

        $contestant = $this->repository->update($contestant, $validator->validate());
        $contestant->update(['step_no' => null]);
        return $this->respondWithModel($contestant);
    }


    /**
    * Display the specified resource.
    *
    * @param Contestant $contestant
    *
    */
   public function show(Contestant $contestant)
   {
       return $this->respondWithModel($contestant);
   }


    /**
     * Update the specified resource in storage.
     *
     * @param ContestantRequest $request
     * @param Contestant $contestant
     *
     */
    public function update(ContestantRequest $request, Contestant $contestant)
    {
        $contestant = $this->repository->update($contestant, $request->validated());
        $contestant->update(['step_no' => ($request->step_no + 1)]);
        return $this->respondWithModel($contestant);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param Contestant $contestant
     *
     * @return JsonResponse
     */
    public function destroy(Contestant $contestant)
    {
        if ($contestant->file){
            $this->deleteFile($contestant->file);
        }
        $this->repository->remove($contestant);
        return $this->respondWithSuccess(__('Contestant Deleted Successfully'));
    }

    /**
     * Toggle level status
     * @return JsonResponse
     */
    public function toggle(){
        $this->repository->toggleField(request()->id , 'status');
        return $this->respondWithSuccess(__('general.Status Changed Successfully'));
    }

    public function upload(Request $request)
    {
        $uploaded = $this->repository->uploadFile($request);
        return $uploaded;
    }

}
