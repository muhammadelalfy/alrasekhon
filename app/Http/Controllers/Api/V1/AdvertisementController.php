<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Api\BaseApiController;
use App\Http\Requests\Api\V1\AdvertisementRequest;
use App\Http\Resources\AdvertisementResource;
use App\Models\Advertisement;
use App\Repositories\Contracts\AdvertisementContract;
use App\Traits\FileUploadTrait;
use Illuminate\Http\Request;
use \Illuminate\Http\Response;
use \Illuminate\Http\JsonResponse;

class AdvertisementController extends BaseApiController
{

    use FileUploadTrait;
    /**
     * AdvertisementController constructor.
     * @param AdvertisementContract $repository
     */
    public function __construct(AdvertisementContract $repository)
    {
        parent::__construct($repository, AdvertisementResource::class);
    }

    public function index(): mixed
    {
        if (request('get_for_competition')){
            $advertisements = Advertisement::cursor();
            return AdvertisementResource::collection($advertisements);
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param AdvertisementRequest $request
     *
     * @return Response
     */
    public function store(AdvertisementRequest $request)
    {
        $data = $request->validated();
        $data['url'] = $data['media_type'] == 'link' ? $this->parseYoutubeLink($data['url']) : null;
        $advertisement = $this->repository->create($data);
        return $this->respondWithModel($advertisement);
    }

   /**
    * Display the specified resource.
    *
    * @param Advertisement $advertisement
    *
    */
   public function show(Advertisement $advertisement)
   {
      //
   }

    /**
     * Show the form for editing the specified resource.
     *
     * @param Advertisement $advertisement
     *
     */
    public function edit(Advertisement $advertisement)
    {
      //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param AdvertisementRequest $request
     * @param Advertisement $advertisement
     *
     */
    public function update(AdvertisementRequest $request, Advertisement $advertisement)
    {
        $data = $request->validated();
        $data['url'] = $data['media_type'] == 'link' ? $this->parseYoutubeLink($data['url']) : null;
        $advertisement = $this->repository->update($advertisement, $data);
        return $this->respondWithModel($advertisement);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param Advertisement $advertisement
     *
     * @return JsonResponse
     */
    public function destroy(Advertisement $advertisement)
    {
        if ($advertisement->file){
            $this->deleteFile($advertisement->file);
        }
        $this->repository->remove($advertisement);
        return $this->respondWithSuccess(__('Advertisement deleted successfully'));
    }

    public function upload(Request $request)
    {
        // To delete old work experience attach
//        if ($request->old_attach_id){
//            $oldFile = File::find($request->old_attach_id);
//            if ($oldFile){
//                $this->deleteFile($oldFile);
//            }
//        }

        $uploaded = $this->repository->uploadFile($request);
        return $uploaded;
    }


    public function parseYoutubeLink($link): array|string|null
    {
        $pattern = '/(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:embed\/|watch\?v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/';
        return preg_replace($pattern, 'https://www.youtube.com/embed/$1', $link);
    }

}
