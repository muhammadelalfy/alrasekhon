<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Api\BaseApiController;
use App\Http\Requests\Api\V1\Users\UserRequest;
use App\Http\Resources\UserResource;
use App\Models\Permission;
use App\Models\Role;
use App\Models\User;
use App\Repositories\Contracts\UserContract;
use App\Traits\JsonValidationTrait;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Validator;

class UserController extends BaseApiController
{

    use JsonValidationTrait;
    /**
     * UserController constructor.
     * @param UserContract $repository
     */
    public function __construct(UserContract $repository)
    {
        parent::__construct($repository, UserResource::class);
    }

    public function index(): mixed
    {
        if (request('get_for_statistics')){
            return User::count();
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param Step1Request $request
     *
     * @return Response
     */
    public function store(UserRequest $request)
    {
        $data = $request->all();
        $data['step_no'] = ($data['step_no'] + 1);
        $User = $this->repository->create($data);
        $permissions = Permission::where('guard_name', 'sanctum')->where('model','!=','User')->get();
        $supervisor = Role::findOrCreate('supervisor', 'sanctum');
        $supervisor->givePermissionTo($permissions);
        $User->assignRole('supervisor');
        return $this->respondWithModel($User);
    }

    public function updateStep(User $user, Request $request)
    {
        $step = $request->step_no;
        if ($step == 2){
            $this->step2($user, $request);
        }
    }


    private function step2(User $user, $request)
    {
        $addressRegex = "/^[0-9a-zA-Z\p{Arabic} !@#$%^&*()]+$/iu";
        $rules = [
            'city_id' => ['required', 'exists:cities,id'],
            'address' => ['required', 'string', 'min:1', 'max:200', 'regex:'.$addressRegex],
            'alternative_address' => ['required', 'string', 'min:1', 'max:200', 'regex:'.$addressRegex]
        ];
        $attributes = [
            'city_id' => __('users.city_id'),
            'address' => __('users.main_address'),
            'alternative_address' => __('users.additional_address'),

        ];

        $validator = Validator::make($request->all(), $rules, [], $attributes);
//        dd($validator->validate());

        if ($validator->fails()){
            $this->failedValidation($validator);
        }
        $result = $this->repository->update($user, $validator->validate());
        return $this->respondWithModel($result);
    }


    /**
     * Display the specified resource.
     *
     * @param User $User
     *
     */
    public function show(User $User)
    {
        return $this->respondWithModel($User);
    }


    /**
     * Update the specified resource in storage.
     *
     * @param Step1Request $request
     * @param User $User
     *
     */
    public function update(UserRequest $request, User $user)
    {
        $contestant = $this->repository->update($user, $request->validated());
        $contestant->update(['step_no' => ($request->step_no + 1)]);
        return $this->respondWithModel($contestant);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param User $User
     *
     * @return JsonResponse
     */
    public function destroy(User $User)
    {
        if ($User->file){
            $this->deleteFile($User->file);
        }
        $this->repository->remove($User);
        return $this->respondWithSuccess(__('User Deleted Successfully'));
    }

    /**
     * Toggle level status
     * @return JsonResponse
     */
    public function toggle(){
        $this->repository->toggleField(request()->id , 'status');
        return $this->respondWithSuccess(__('general.Status Changed Successfully'));
    }

    public function upload(\Illuminate\Http\Request $request)
    {
        $uploaded = $this->repository->uploadFile($request);
        return $uploaded;
    }

}
